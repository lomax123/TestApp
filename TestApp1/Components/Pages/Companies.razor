@page "/companies"

@using Microsoft.EntityFrameworkCore
@using TestApp1.Data
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ApplicationDbContext DbContext

<h3>Companies</h3>

@if (CompaniesDtos is null)
{
    <p>Loading...</p>
}
else
{
    <QuickGrid Items="CompaniesDtos">
        <PropertyColumn Property="@(c => c.Id)" Title="Id" Sortable="true" />
        <PropertyColumn Property="@(c => c.CompanyAltId)" Title="CompanyAltId" />
        <PropertyColumn Property="@(c => c.CompanyCode)" Title="CompanyCode" />
        <PropertyColumn Property="@(c => c.Name)" Title="Name" />
        <PropertyColumn Property="@(c => c.StreetAddress)" Title="StreetAddress" />
        <PropertyColumn Property="@(c => c.City)" Title="City" />
        <PropertyColumn Property="@(c => c.State)" Title="State" />
        <PropertyColumn Property="@(c => c.PostalCode)" Title="PostalCode" />
    </QuickGrid>
}

@code {

    private IQueryable<CompanyDto>? CompaniesDtos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var items = await DbContext.Database.SqlQuery<CompanyDto>($"SELECT Id, CompanyAltId, CompanyCode, Name, StreetAddress, City, State, PostalCode FROM Companies").ToListAsync();
        CompaniesDtos = items.AsQueryable();
    }

    public class CompanyDto
    {
        public int Id { get; set; }
        public Guid CompanyAltId { get; set; }
        public string? CompanyCode { get; set; }
        public string? Name { get; set; }
        public string? StreetAddress { get; set; }
        public string? City { get; set; }
        public string? State { get; set; }
        public string? PostalCode { get; set; }
    }
}
